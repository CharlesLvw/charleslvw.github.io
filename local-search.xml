<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/27/hello-world/"/>
    <url>/2021/06/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>持续集成---Jenkins</title>
    <link href="/2020/09/14/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-Jenkins/"/>
    <url>/2020/09/14/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-Jenkins/</url>
    
    <content type="html"><![CDATA[<h2 id="持续集成—Jenkins"><a href="#持续集成—Jenkins" class="headerlink" title="持续集成—Jenkins"></a>持续集成—Jenkins</h2><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>是一个用Java编写的开源的持续集成工具，提供了软件开发的持续集成服务，可监控并触发持续重复的工作，具有开源，支持多平台和插件扩展，安装简单，界面化管理等特点。</p><h3 id="持续集成原理"><a href="#持续集成原理" class="headerlink" title="持续集成原理"></a>持续集成原理</h3><h5 id="持续集成-简称CI（continuous-integration）"><a href="#持续集成-简称CI（continuous-integration）" class="headerlink" title="持续集成, 简称CI（continuous integration）."></a>持续集成, 简称CI（continuous integration）.</h5><ul><li>CI作为敏捷开发重要的一步，其目的在于让产品快速迭代的同时，尽可能保持高质量.</li><li>CI一种可以增加项目可见性，降低项目失败风险的开发实践。其每一次代码更新，都要通过自动化测试来检测代码和功能的正确性，只有通过自动测试的代码才能进行后续的交付和部署.</li><li>CI 是团队成员间（产研测）更好地协调工作，更好的适应敏捷迭代开发，自动完成减少人工干预，保证每个时间点上团队成员提交的代码都能成功集成的，可以很好的用于对各种WEB、APP项目的打包.</li></ul><h3 id="安装方法：官文跳转"><a href="#安装方法：官文跳转" class="headerlink" title="安装方法：官文跳转"></a>安装方法：<a href="https://www.jenkins.io/zh/doc/pipeline/tour/getting-started/">官文跳转</a></h3><p><em><strong>PS： 官方的文档是最好的文档</strong></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>工作杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>network namespace</title>
    <link href="/2020/09/14/network_namespace/"/>
    <url>/2020/09/14/network_namespace/</url>
    
    <content type="html"><![CDATA[<h3 id="关于容器的network-namespace"><a href="#关于容器的network-namespace" class="headerlink" title="关于容器的network namespace"></a>关于容器的network namespace</h3><h5 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h5><p>开发编写了处理IP泄露问题的脚本,由于记录的信息全部是以error和warning标识（其实都是info），导致客户查看日志时认为有很多容器异常重启了,被怀疑是脚本惹的祸。且日志中记录的都是netns，因此无法直接匹配到对应的容器信息，于是想到这个方法，每间隔一段时间运行一次，记录当前所有容器的name、netns、images信息</p><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>证明运维无罪，找到消失的容器对应的镜像</p><ul><li>查询netns示例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>for name in `docker container  ls | awk &#123;&#x27;print $NF&#x27;&#125; | grep -v NAMES`<br>do<br><br>  dockerpid=`docker inspect -f &#123;&#123;&#x27;.State.Pid&#x27;&#125;&#125; $&#123;name&#125;`<br>  cd /proc/$&#123;dockerpid&#125;/ns<br>  inode=ll | grep &#x27;net&#x27; | awk -F &quot;:&quot; &#123;&#x27;print $3&#x27;&#125; | awk -F &quot;[&quot; &#123;&#x27;print $2&#x27;&#125; | awk -F &quot;]&quot; &#123;&#x27;print $1&#x27;&#125;<br>  ns_name=`ls -i /run/docker/netns/ | grep &quot;$&#123;inode&#125;&quot;`<br>  echo $&#123;ns_name&#125;<br><br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>工作吐槽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows-OPS</title>
    <link href="/2020/07/20/Windows-ops/"/>
    <url>/2020/07/20/Windows-ops/</url>
    
    <content type="html"><![CDATA[<h3 id="Windows-常用运维命令—powershell"><a href="#Windows-常用运维命令—powershell" class="headerlink" title="Windows 常用运维命令—powershell"></a>Windows 常用运维命令—powershell</h3><h5 id="通过PID找对应目录"><a href="#通过PID找对应目录" class="headerlink" title="通过PID找对应目录"></a>通过PID找对应目录</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wmic <span class="hljs-keyword">process</span> get name,executablepath,processid|findstr pid<br></code></pre></td></tr></table></figure><h4 id="查看当前连接数"><a href="#查看当前连接数" class="headerlink" title="查看当前连接数"></a>查看当前连接数</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netstat <span class="hljs-literal">-an</span>|findstr <span class="hljs-string">&quot;ESTABLISHED&quot;</span> ｜ <span class="hljs-built_in">Measure-Object</span><br></code></pre></td></tr></table></figure><h4 id="使用powershel实现搜索文件"><a href="#使用powershel实现搜索文件" class="headerlink" title="使用powershel实现搜索文件"></a>使用powershel实现搜索文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-Content</span> C:\Windows\system32\drivers\etc\hosts | <span class="hljs-built_in">Out-String</span> <span class="hljs-literal">-Stream</span> | <span class="hljs-built_in">Select-String</span> <span class="hljs-string">&quot;localhost&quot;</span><br></code></pre></td></tr></table></figure><h4 id="查询过期文件"><a href="#查询过期文件" class="headerlink" title="查询过期文件"></a>查询过期文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;C:\inetpub\logs\LogFiles\W3SVC1\&quot;</span><br><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$path</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-ErrorAction</span>:SilentlyContinue | ` <span class="hljs-built_in">Where-Object</span> <span class="hljs-literal">-FilterScript</span> &#123;(((<span class="hljs-built_in">get-date</span>) - (<span class="hljs-variable">$_</span>.CreationTime)).days <span class="hljs-operator">-gt</span> <span class="hljs-number">10</span> ` <span class="hljs-operator">-and</span> <span class="hljs-variable">$_</span>.PsISContainer <span class="hljs-operator">-ne</span> <span class="hljs-variable">$True</span>)&#125; | <span class="hljs-built_in">Select-Object</span> FullName<br></code></pre></td></tr></table></figure><ul><li>Select-Object FullName：查找</li><li>Remove-Item：删除</li><li>Remove-Item -Force：删除，包括只读和隐藏</li></ul><h4 id="重启指定服务"><a href="#重启指定服务" class="headerlink" title="重启指定服务"></a>重启指定服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$cpuper</span> = <span class="hljs-built_in">Get-Counter</span> <span class="hljs-string">&#x27;\Processor(_Total)\% Processor Time&#x27;</span> | <span class="hljs-built_in">ForEach-Object</span> &#123;<span class="hljs-variable">$_</span>.CounterSamples&#125; | <span class="hljs-built_in">ForEach-Object</span> &#123;<span class="hljs-variable">$_</span>.CookedValue&#125;<br><br><span class="hljs-variable">$cpuper</span> = <span class="hljs-string">&quot;&#123;0:f&#125;&quot;</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$cpuper</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cpuper</span> <span class="hljs-operator">-gt</span> <span class="hljs-number">60</span>)<br>&#123;<br>      <span class="hljs-built_in">Restart-Service</span> <span class="hljs-literal">-Name</span> &lt;service name&gt; <span class="hljs-literal">-Force</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现DNAT"><a href="#实现DNAT" class="headerlink" title="实现DNAT"></a>实现DNAT</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh interface portproxy add v4tov4 listenaddress=<span class="hljs-number">172.20</span>.<span class="hljs-number">53.1</span> listenport=<span class="hljs-number">14941</span> connectaddress=<span class="hljs-number">172.20</span>.<span class="hljs-number">53.2</span> connectport=<span class="hljs-number">3389</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux_ops</title>
    <link href="/2020/05/29/Linux-ops/"/>
    <url>/2020/05/29/Linux-ops/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux运维常用指令"><a href="#Linux运维常用指令" class="headerlink" title="Linux运维常用指令"></a>Linux运维常用指令</h3><ul><li>查看TCP连接数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for (a in S) print a, S[a]&#125;&#x27;<br>/^tcp/<br></code></pre></td></tr></table></figure><p>1、滤出tcp开头的记录，屏蔽udp, socket等无关记录。</p><p>2、state[]相当于定义了一个名叫state的数组</p><p>3、NF表示记录的字段数，如上所示的记录，NF等于6</p><p>4、$NF 表示某个字段的值，如上所示的记录，$NF也就是$6，表示第6个字段的值，也就是TIME_WAIT</p><p>5、state[$NF]表示数组元素的值，如上所示的记录，就是state[TIME_WAIT]状态的连接数</p><p>6、++state[$NF]表示把某个数加一，如上所示的记录，就是把state[TIME_WAIT]状态的连接数加一</p><p>7、END 表示在最后阶段要执行的命令</p><ul><li>查看连接数和IP</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -nat | grep &quot;port&quot; |awk -F&quot; &quot; &#x27;&#123;print $5&#125;&#x27; | awk -F:  &#x27;&#123;print $1&#125;&#x27;  | sort | uniq -c | sort -nr<br></code></pre></td></tr></table></figure><ul><li>删除30天前的.log文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -mtime +30 -type f -name &quot;*.log&quot; -exec rm -rfv &#123;&#125; \;<br></code></pre></td></tr></table></figure><ul><li>查看所有用户计划任务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/passwd | cut -f 1 -d : |xargs -I &#123;&#125; crontab -l -u &#123;&#125; | grep -v &quot;#&quot;<br></code></pre></td></tr></table></figure><ul><li>kill某服务名所有进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef|grep watchbog|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9<br></code></pre></td></tr></table></figure><ul><li>查看指定端口进程号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -tnlp | grep &quot;8009&quot; | awk -F &#x27; &#x27; &#x27;&#123;print $7&#125;&#x27; | awk -F &#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>查询目录top10（大小为单位）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -type d -print0 | xargs -0 du -h | sort -rh | head -n 10<br></code></pre></td></tr></table></figure><ul><li>批量修改不同文件内的相同信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i s/yyyy/xxxx/g `grep yyyy -rl --include=&quot;*.txt&quot; ./`<br></code></pre></td></tr></table></figure><ul><li>查看内存分配</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -eo pmem,pcpu,rss,vsize,args | sort -k 1 -r | less<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes部署杂记</title>
    <link href="/2020/04/23/kubernetes%E9%83%A8%E7%BD%B2%E6%9D%82%E8%AE%B0/"/>
    <url>/2020/04/23/kubernetes%E9%83%A8%E7%BD%B2%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.kubernetes.org.cn/7189.html">kubernetes中文社区–部署文档</a></p><ul><li>基于系统ubuntu 19</li><li>简记:<ul><li>master,node:安装kubelet,kubeadm,docker,kubectl(node可不装)<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">kubelet：运行在每个节点上的主要的“节点代理”，它按照 PodSpec 中的描述工作 <br><br>kubeadm：快速创建和加入集群的工具<br><br>kubectl：是Kubernetes 的命令行工具（<span class="hljs-keyword">CLI</span>），是Kubernetes 用户和管理员必备的管理工具。kubectl提供了大量的子命令，方便管理Kubernetes集群中的各种功能。<br></code></pre></td></tr></table></figure></li><li>master:kubeadm init(初始化集群)</li><li>nodes:kubeadm join(加入集群)</li></ul></li></ul><p>  安装https支持<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></td></tr></table></figure></p><p>  加载docker key<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure></p><p>  加载docker源</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable&quot;<br></code></pre></td></tr></table></figure><p>  加载kubernetes key<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br></code></pre></td></tr></table></figure></p><p>  加载kubernetes 源<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list<br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br>EOF<br></code></pre></td></tr></table></figure></p><p>  刷新源<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update<br></code></pre></td></tr></table></figure></p><p>  基础环境部署<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install docker-ce kubelet kubeadm kubectl<br>systemctl enable docker kubelet<br></code></pre></td></tr></table></figure></p><p>  查询需要的镜像<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm config images list<br></code></pre></td></tr></table></figure></p><p>  编写shell脚本，通过docker拉取镜像<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br> <br>images=&quot;<br>  kube-apiserver:v1.17.0<br>  kube-controller-manager:v1.17.0<br>  kube-scheduler:v1.17.0<br>  kube-proxy:v1.17.0<br>  pause:3.1<br>  etcd:3.4.3-0<br>  coredns:1.6.5<br>&quot;<br><br>for imageName in $&#123;images&#125; ; do<br>    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName<br>    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName<br>done<br></code></pre></td></tr></table></figure></p><p>  初始化集群<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init<br></code></pre></td></tr></table></figure></p><p>  初始化参数示例<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --pod-network-cidr=10.10.0.0/16 --service-cidr=10.100.0.0/16<br></code></pre></td></tr></table></figure></p><p>  <img src="kubeadm_init.jpg"></p><p>  加入集群示例<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm join ip:port --token &lt;token&gt; --discovery-token-ca-cert-hash &lt;cert&gt;<br></code></pre></td></tr></table></figure></p><p>  获取集群当前token(token有效期为24小时)<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm token list<br></code></pre></td></tr></table></figure></p><p>  获取当前节点证书加密字符<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;<br></code></pre></td></tr></table></figure><br>  kubectl get cs 查看核心组件健康状态</p><p>  kubectl get nodes 获取节点状态信息</p><p>  kubectl get pods -n kube-system 获取pod信息，-n指定名称空间</p><p>  kubectl get ns 获取名称空间</p>]]></content>
    
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>辣椒油</title>
    <link href="/2019/12/23/Chilli_oil/"/>
    <url>/2019/12/23/Chilli_oil/</url>
    
    <content type="html"><![CDATA[<h2 id="偷学之辣椒油"><a href="#偷学之辣椒油" class="headerlink" title="偷学之辣椒油"></a>偷学之辣椒油</h2><ul><li>准备香料：</li></ul><blockquote><p>蒜片、姜丝、八角、花椒、桂皮、香叶、葱、香菜、大葱葱白，干辣椒</p></blockquote><ul><li>材料：</li></ul><blockquote><p>辣椒面、芝麻、花椒油</p></blockquote><blockquote><p>一. 碗里准备辣椒面，加入芝麻和一点生油、花椒油 </p></blockquote><blockquote><p>二. 油烧热，加入准备的香料，其中桂皮加一片即可，否则味道很重，其他的可以根据喜好、口味适量添加，小火熬 ，直到所有的材料变焦，捞出。</p></blockquote><blockquote><p>三. 熟油直接加到准备的辣椒面之中，搅拌均匀。根据自己的口味加入适量食用盐</p></blockquote><div align=center><img src="/img/辣椒油.jpeg" style="height:400px"/></div>]]></content>
    
    
    <categories>
      
      <category>菜谱</category>
      
    </categories>
    
    
    <tags>
      
      <tag>辣椒油</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>data-operation</title>
    <link href="/2019/12/20/data-operation/"/>
    <url>/2019/12/20/data-operation/</url>
    
    <content type="html"><![CDATA[<p>数据相关工作笔记<br>工作笔记，仅暂未心得分享</p><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><h5 id="删除带有镜像的库"><a href="#删除带有镜像的库" class="headerlink" title="删除带有镜像的库"></a>删除带有镜像的库</h5><blockquote><p>查询此库当前所有进程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> spid <span class="hljs-keyword">from</span> sys.sysprocesses <span class="hljs-keyword">where</span> dbid<span class="hljs-operator">=</span>DB_ID(<span class="hljs-string">&#x27;&lt;dbname&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>关闭进程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">kill <span class="hljs-operator">&lt;</span>pid<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>关闭镜像复制</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-operator">&lt;</span>dbname<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> PARTNER OFF;<br></code></pre></td></tr></table></figure><blockquote><p>删除数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE <span class="hljs-operator">&lt;</span>dbname<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><h5 id="数据收缩"><a href="#数据收缩" class="headerlink" title="数据收缩"></a>数据收缩</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBCC SHRINKDATABASE<span class="hljs-operator">&lt;</span>dbname<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h2><h5 id="mongoexport"><a href="#mongoexport" class="headerlink" title="mongoexport"></a>mongoexport</h5><ul><li>不建议用于全量备份，通常用于备份或导出数据的一部分数据</li></ul><blockquote><p>常用参数介绍</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">Options:<br>--host &lt;hostname&gt;&lt;:port&gt;, -h &lt;hostname&gt;&lt;:port&gt;<br>Default: localhost:27017<br> <br>--port &lt;port&gt;<br>Default: 27017<br>Specifies the TCP port on which the MongoDB instance listens for client connections.<br> <br>--username &lt;username&gt;, -u &lt;username&gt;<br>Specifies a username with which to authenticate to a MongoDB database that uses authentication. Use in conjunction with the --password and --authenticationDatabase options.<br> <br>--password &lt;password&gt;, -p &lt;password&gt;<br>Specifies a password with which to authenticate to a MongoDB database that uses authentication. Use in conjunction with the --username and --authenticationDatabase options.<br> <br>--db &lt;database&gt;, -d &lt;database&gt;<br>Specifies the name of the database on which to run the mongoexport.<br> <br>--collection &lt;collection&gt;, -c &lt;collection&gt;<br>Specifies the collection to export.<br> <br>--fields &lt;field1[,field2]&gt;, -f &lt;field1[,field2]&gt;¶<br>Specifies a field or fields to include in the export. Use a comma separated list of fields to specify multiple fields.<br> <br> <br> <br>--csv<br>Changes the export format to a comma-separated-values (CSV) format. By default mongoexport writes data using one JSON document for every MongoDB document.<br> <br> <br>--out &lt;file&gt;, -o &lt;file&gt;<br>Specifies a file to write the export to. If you do not specify a file name, the mongoexport writes data to standard output (e.g. stdout).<br> <br>--jsonArray<br>Modifies the output of mongoexport to write the entire contents of the export as a single JSON array. By default mongoexport writes data using one JSON document for every MongoDB document<br></code></pre></td></tr></table></figure><blockquote><p>shell备份脚本如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> author:Charles</span><br><span class="hljs-meta">#</span><span class="bash"> date:2019-04-18</span><br>set -x<br><br>backuptime=$(/bin/date &quot;+%Y%m%d&quot;)<br>user=testAdmin<br>password=123456<br>backup_dir=/backup<br>port=27017<br>database=local<br><br>data=`/usr/bin/mongo 127.0.0.1 -u$&#123;user&#125; -p$&#123;password&#125; &lt;&lt;EOF<br>use local;<br>show collections;<br>exit;<br>EOF`<br><br>for gather in $&#123;data&#125;<br>do<br><span class="hljs-meta">#</span><span class="bash">json array</span><br><span class="hljs-meta">#</span><span class="bash">/usr/bin/mongoexport --port <span class="hljs-variable">$&#123;port&#125;</span> -u<span class="hljs-variable">$&#123;user&#125;</span> -p<span class="hljs-variable">$&#123;password&#125;</span> -d <span class="hljs-variable">$&#123;database&#125;</span> -c <span class="hljs-variable">$&#123;gather&#125;</span>  --jsonArray -o <span class="hljs-variable">$&#123;backup_dir&#125;</span><span class="hljs-variable">$&#123;backuptime&#125;</span>/<span class="hljs-variable">$&#123;gather&#125;</span>.json --authenticationDatabase <span class="hljs-built_in">test</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">csv document,must specify the fields <span class="hljs-keyword">in</span> the documents to <span class="hljs-built_in">export</span></span><br><span class="hljs-meta">#</span><span class="bash">/usr/bin/mongoexport --port <span class="hljs-variable">$&#123;port&#125;</span> -u<span class="hljs-variable">$&#123;user&#125;</span> -p<span class="hljs-variable">$&#123;password&#125;</span> -d <span class="hljs-variable">$&#123;database&#125;</span> -c <span class="hljs-variable">$&#123;gather&#125;</span>  --csv -f hostname,startTime -o <span class="hljs-variable">$&#123;backup_dir&#125;</span><span class="hljs-variable">$&#123;backuptime&#125;</span>/<span class="hljs-variable">$&#123;gather&#125;</span>.csv --authenticationDatabase <span class="hljs-built_in">test</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">json document</span><br>/usr/bin/mongoexport --port $&#123;port&#125; -u$&#123;user&#125; -p$&#123;password&#125; -d $&#123;database&#125; -c $&#123;gather&#125; -o $&#123;backup_dir&#125;$&#123;backuptime&#125;/$&#123;gather&#125;.json --authenticationDatabase test<br>done<br></code></pre></td></tr></table></figure><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><h5 id="单库导入导出"><a href="#单库导入导出" class="headerlink" title="单库导入导出"></a>单库导入导出</h5><blockquote><p>导出</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_dump -Upostgres &lt;dbname&gt; -c &gt; /bak/name.bak<br></code></pre></td></tr></table></figure><blockquote><p>导入</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">psql -U postgres -d dbname &lt; /bak/name.bak<br></code></pre></td></tr></table></figure><blockquote><p>若导入的库已存在并有数据，需要先drop库，再执行导入。若drop库时，库被占用则执行下面的语句清理，至返回值为无连接信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> pg_terminate_backend(pid) <span class="hljs-keyword">FROM</span> pg_stat_activity <span class="hljs-keyword">WHERE</span> pid <span class="hljs-operator">&lt;&gt;</span> pg_backend_pid() <span class="hljs-keyword">AND</span> datname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dbname&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>drop库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database dbname;<br></code></pre></td></tr></table></figure><blockquote><p>新建库并附权</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database dbname <span class="hljs-keyword">with</span> owner<span class="hljs-operator">=</span>username;<br></code></pre></td></tr></table></figure><h5 id="修改用户属性"><a href="#修改用户属性" class="headerlink" title="修改用户属性"></a>修改用户属性</h5><ul><li>具有CREATEROLE权限的用户或者超级用户才能执行该命令，option选项的含义参见CREATE USER命令。数据库超级用户可以修改任何普通用户的属性。只用postgres才能修改其它的超级用户的属性。一个用户只能修改自己的密码，不能修改自己的其它属性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> name [ [ <span class="hljs-keyword">WITH</span> ] option [ ... ] ]<br></code></pre></td></tr></table></figure><blockquote><p>其中option可以是:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">|</span> SUPERUSER  <span class="hljs-operator">|</span> NOSUPERUSER<br> <br><span class="hljs-operator">|</span> CREATEDB   <span class="hljs-operator">|</span> NOCREATEDB<br> <br><span class="hljs-operator">|</span> CREATEROLE <span class="hljs-operator">|</span> NOCREATEROLE<br> <br><span class="hljs-operator">|</span> CONNECTION LIMIT connlimit<br> <br><span class="hljs-operator">|</span> &#123;ENCRYPTED <span class="hljs-operator">|</span> UNENCRYPTED&#125; PASSWORD ’password’<br> <br><span class="hljs-operator">|</span> VALID UNTIL ’<span class="hljs-type">timestamp</span>’<br></code></pre></td></tr></table></figure><ul><li>例</li></ul><blockquote><p>使数据库用户testname失去CREATEDB、CREATEROLE和LOGIN权限</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span>  testname  NOCREATEDB  NOCREATEROLE  NOLOGIN;<br></code></pre></td></tr></table></figure><blockquote><p>将用户testname的密码改为123123</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span>  <span class="hljs-keyword">USER</span>  testname  password <span class="hljs-string">&#x27;123123&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>只读用户</li></ul><blockquote><p>新建用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> readall <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-string">&#x27;passwd&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>用户只读事务</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> readall <span class="hljs-keyword">set</span> default_transaction_read_only<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><blockquote><p>把所有库的语言的USAGE权限赋予用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> USAGE <span class="hljs-keyword">ON</span> SCHEMA public <span class="hljs-keyword">to</span> readall;<br></code></pre></td></tr></table></figure><blockquote><p>授权库中所有表的select权限（必须进库授权，同表权限授权）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">all</span> tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">to</span> readall;<br></code></pre></td></tr></table></figure><blockquote><p>新表自动附权</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DEFAULT</span> PRIVILEGES <span class="hljs-keyword">IN</span> SCHEMA public <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> TABLES <span class="hljs-keyword">TO</span> readall;<br></code></pre></td></tr></table></figure><ul><li>清理归档日志</li></ul><blockquote><p> 进入存放日志的目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /pg_data200/11/main/pg_wal<br></code></pre></td></tr></table></figure><blockquote><p>清理日志 &lt;00000001000000A10000006B&gt; 前的所有日志</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_archivecleanup . 00000001000000A10000006B<br></code></pre></td></tr></table></figure><ul><li>修改归档日志保留数量</li></ul><blockquote><p>连接数据库查看当前保留数量</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> wal_keep_segments；<br></code></pre></td></tr></table></figure><blockquote><p>修改配置文件 wal_keep_segments 参数，reload服务使配置生效，下一次checkpoint时会自动清理，或手动执行checkpoint</p></blockquote><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><h5 id="关于服务重启"><a href="#关于服务重启" class="headerlink" title="关于服务重启"></a>关于服务重启</h5><ol><li><p>Oracle启动需要经历四个状态:SHUTDOWN 、NOMOUNT 、MOUNT 、OPEN</p></li><li><p>Oracle关闭的四种状态：Normal, Immediate, Transactional, Abort</p></li></ol><blockquote><p>Oracle数据库的完整启动过程是分步骤完成的，包含以下3个步骤：</p></blockquote><ul><li>启动实例–&gt;加载数据库–&gt;打开数据库</li></ul><blockquote><p>关闭数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">shutdown immediate;<br></code></pre></td></tr></table></figure><blockquote><p>开启数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">startup;<br></code></pre></td></tr></table></figure><blockquote><p>启动默认监听</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsnrctl start<br></code></pre></td></tr></table></figure><blockquote><p>启动指定监听</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">lsnrctl <span class="hljs-keyword">start</span> listener_name<br></code></pre></td></tr></table></figure><blockquote><p>查看当前启动状态，启动对应的状态</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,open_mode <span class="hljs-keyword">from</span> v$database;<br></code></pre></td></tr></table></figure><blockquote><p>根据当前启动状态启动数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database <span class="hljs-operator">&lt;</span>status<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Oracle-CPU使用率过高排查"><a href="#Oracle-CPU使用率过高排查" class="headerlink" title="Oracle CPU使用率过高排查"></a>Oracle CPU使用率过高排查</h5><blockquote><p>查看语句top10</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> v.sql_id,<br>v.child_number,<br>v.sql_fulltext,<br>v.elapsed_time,<br>v.cpu_time,<br>v.disk_reads,<br><span class="hljs-built_in">rank</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> v.elapsed_time <span class="hljs-keyword">desc</span>) elapsed_rank<br><span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span> v) a<br><span class="hljs-keyword">where</span> elapsed_rank <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cpu_time <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><blockquote><p>查看CPU使用率最高及性能查询的语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> linesize <span class="hljs-number">600</span><br>col SQL_TEXT <span class="hljs-keyword">for</span> a500<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> sql_text,sql_id,cpu_time <span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cpu_time <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rownum <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><blockquote><p>查看使用频率最高的5个查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sql_text,executions<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> sql_text,executions,<br><span class="hljs-built_in">rank</span>() <span class="hljs-keyword">over</span><br>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> executions <span class="hljs-keyword">desc</span>) exec_rank<br><span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span>)<br><span class="hljs-keyword">where</span> exec_rank <span class="hljs-operator">&lt;=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><blockquote><p>查看消耗磁盘读取最多的sql top5</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> disk_reads,sql_text<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> sql_text,disk_reads,<br><span class="hljs-built_in">dense_rank</span>() <span class="hljs-keyword">over</span><br>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> disk_reads <span class="hljs-keyword">desc</span>) disk_reads_rank<br><span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span>)<br><span class="hljs-keyword">where</span> disk_reads_rank <span class="hljs-operator">&lt;=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><blockquote><p>查看需要大量缓冲读取（逻辑读）操作的查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> buffer_gets,sql_text<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> sql_text,buffer_gets,<br><span class="hljs-built_in">dense_rank</span>() <span class="hljs-keyword">over</span><br>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> buffer_gets <span class="hljs-keyword">desc</span>) buffer_gets_rank<br><span class="hljs-keyword">from</span> v$<span class="hljs-keyword">sql</span>)<br><span class="hljs-keyword">where</span> buffer_gets_rank<span class="hljs-operator">&lt;=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><blockquote><p>Oracle阻塞查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">with</span> vw_lock <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> v$lock)<br><span class="hljs-keyword">select</span><br>a.sid,<br><span class="hljs-string">&#x27;is blocking&#x27;</span>,<br>(<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;sid:&#x27;</span><span class="hljs-operator">||</span>s.sid<span class="hljs-operator">||</span><span class="hljs-string">&#x27; object:&#x27;</span><span class="hljs-operator">||</span>do.object_name<span class="hljs-operator">||</span><span class="hljs-string">&#x27; rowid:&#x27;</span><span class="hljs-operator">||</span><br>    dbms_rowid.rowid_create ( <span class="hljs-number">1</span>, ROW_WAIT_OBJ#, ROW_WAIT_FILE#, ROW_WAIT_BLOCK#, ROW_WAIT_ROW# )<br>    <span class="hljs-operator">||</span><span class="hljs-string">&#x27; sql_id:&#x27;</span><span class="hljs-operator">||</span>s.sql_id<br>   <span class="hljs-keyword">from</span> v$session s, dba_objects do<br>    <span class="hljs-keyword">where</span> s.sid<span class="hljs-operator">=</span>b.sid<br>    <span class="hljs-keyword">and</span> s.ROW_WAIT_OBJ# <span class="hljs-operator">=</span> do.OBJECT_ID<br>) blockee,<br>b.sid,b.id1,b.id2<br><span class="hljs-keyword">from</span> vw_lock a, vw_lock b<br><span class="hljs-keyword">where</span> a.block <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">and</span> b.request <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">and</span> a.id1 <span class="hljs-operator">=</span> b.id1<br><span class="hljs-keyword">and</span> a.id2 <span class="hljs-operator">=</span> b.id2;<br></code></pre></td></tr></table></figure><h5 id="用户被锁"><a href="#用户被锁" class="headerlink" title="用户被锁"></a>用户被锁</h5><blockquote><p>查询当前所有用户锁状态及时间</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,account_status,lock_date <span class="hljs-keyword">from</span> dba_users;<br></code></pre></td></tr></table></figure><blockquote><p>解锁</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">&lt;</span>username<span class="hljs-operator">&gt;</span> account unlock;<br></code></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h5 id="mysqldump-备份数据"><a href="#mysqldump-备份数据" class="headerlink" title="mysqldump 备份数据"></a>mysqldump 备份数据</h5><blockquote><p>逻辑备份sql语句</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-u 用户名<br>-p 密码<br>-A 所有的库<br></code></pre></td></tr></table></figure><blockquote><p>single-transaction INNODB存储引擎的表备份时能够做到数据一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -uroot -puplooking -A --single-transaction &gt; /tmp/mysql_bak.sql<br></code></pre></td></tr></table></figure><blockquote><p>lock-all-tables MYISAM存储引擎的表备份时能够做到数据一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -uroot -puplooking -A --lock-all-tables &gt; /tmp/mysql_bak.sql<br></code></pre></td></tr></table></figure><blockquote><p>通过binlog还原</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqlbinlog <span class="hljs-comment">--start-datetime=&quot;2019-11-07 12:01:00&quot;  --stop-datetime=&quot;2018-19-07 12:30:00&quot; /data/mysql/data/mysql-bin.000020 &gt;&gt; /home/madong/aa.sql</span><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span> <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>madong<span class="hljs-operator">/</span>aa.sql<br></code></pre></td></tr></table></figure><h5 id="批量修改字段"><a href="#批量修改字段" class="headerlink" title="批量修改字段"></a>批量修改字段</h5><blockquote><p>例： 修改test表中的guid字段，将其中的test更换为testting</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">update test <span class="hljs-keyword">set</span> guid<span class="hljs-operator">=</span>replace(guid,<span class="hljs-string">&#x27;http://testting&#x27;</span>,<span class="hljs-string">&#x27;http://test/1/2&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="查看字符集、表排序"><a href="#查看字符集、表排序" class="headerlink" title="查看字符集、表排序"></a>查看字符集、表排序</h5><blockquote><p>指定表查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>tablename<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>针对全局或当前库查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> (<span class="hljs-keyword">global</span>) variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%coll%&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="清理mysq系统日志"><a href="#清理mysq系统日志" class="headerlink" title="清理mysq系统日志"></a>清理mysq系统日志</h5><ul><li>以清理err日志为例</li></ul><blockquote><p>确定日志文件信息</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%log%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>修改源日志名称</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv &lt;name.err&gt; &lt;name.err.bak&gt;<br></code></pre></td></tr></table></figure><blockquote><p>刷新mysql配置环境，重新加载相关文件（热加载）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">FLUSH ERROR LOGS<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>databases</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SqlServer</tag>
      
      <tag>Mysql</tag>
      
      <tag>PostgreSql</tag>
      
      <tag>Oracle</tag>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
